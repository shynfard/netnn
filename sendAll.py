#!/usr/bin/env python3
import argparse
import sys
import socket
import random
import struct

from scapy.all import sendp, send, get_if_list, get_if_hwaddr, bind_layers
from scapy.all import Packet
from scapy.all import Ether, IP, UDP
from scapy.fields import *
import readline


class P4calc(Packet):
    name = "P4calc"
    fields_desc = [
        StrFixedLenField("P", "P", length=1),
        StrFixedLenField("Four", "4", length=1),
        XByteField("version", 0x01),
        BitField("s1_index", 0, 32),
        BitField("s1_max_pool_index", 0, 32),
        BitField("s1_input_data", 0, 40),
        BitField("s1_replication", 0, 32),
        BitField("s1_res", 0, 64),
        BitField("s2_replication", 0, 32),
        BitField("s2_res", 0, 128),
        BitField("s2_index", 0, 32),
        BitField("s3_replication", 0, 32),
        BitField("s3_res", 0, 104),
        BitField("s4_replication", 0, 32),
        BitField("s4_res", 0, 200),
        BitField("s5_res", 0, 8),
    ]


def get_if():
    ifs = get_if_list()
    iface = None
    for i in get_if_list():
        if "eth0" in i:
            iface = i
            break
    if not iface:
        print("Cannot find eth0 interface")
        exit(1)
    return iface


def main():
    data = "3F46D79BFA0923911C85B18ECEFCC49B42438851889E7428ACDA5CFA7870121FFE758E44E4E4C2BDA02E36CA37061327121DA7D360120A3ED5C6D9075CEA6711E5AE250FD4F4D01B46BDFB6B72B6124DCB15B32CE6A55A23116AD443D60FB1E42D4B303B3490CFB53C5A5609D46CBF449ECDE9BCF55F7EF46161D48569117C4CA497E5EEC861D98B636DA5088C4483CDDB8E86E2BD11C831AA53A4FDE45C818E2ACF33271053875BDED8BF908E105374425762BEA79CA254054042FB0AAADF924F58CF782FD15057A6F58ECA980C1118FE107C337F646BF9B6E249452C4FE02BA6A126A7738A18418DCA80560C4EC8A3639FFC78DFA13AB369CB5BC50707735F302EFA3D3A70F6E22A24C2C46C52D964853EDDC9B4CE5B51DA787012B2CB92CFACFC77343BABEE999A44E52C8F5345B562F163EC9E501689FFAFC96C7B3D4B7F34C356CDAD587DA01F4147B66B70EAC1816D70DD6820C4D4A33511FFE758E44E4E4C2BDA8EB47D3A5CC40402E36CA4140C84280FA1D142C37061327121DA7D360120A3ED5C6D9075CEAC75D6A40E4D2F755C2CADDCBC53A0E6711E5AE250FD4F4D01B46BDFB6B72B6124DCB15B32CE6A55A23116AD443D60FB1E42D4B303B3490CFB53C5A5609D46CBF449ECDE9BCF55F7EF46161D48569117C4CA497E5EEC861D98B636DA5088C4483CDDB8E86E2BD11C831AA53A4FDE45C818E2ACF33271053875BDED8BF908E105374425762BEA79CA254054042FB0AAADF924F58CF782FD15057A6F58ECA980C1118FE107C337F646BF9B6E249452C4FE02BA6A126A7738A18418DCA80560C4EC8A3639FFC78DFA13AB369CB5BC50707735F302EFA3D3A70F6E22A24C2C46C52D964853EDDC9B4CE5B51DA7B42C2B695A74831EA2D23FA6387BB89966A98A78E66ADC0E52B4C11BC387012B2CB92CFACFC77343BABEE999A44E52C8F5345B562F163EC9E501689FFAFC96C7B3D4B7F34C356CDAD587DA01F4147B66B70EAC1816D70DD6820C4D4A33511FFE758E44E4E4C2BDA8EB47D3A5CC40402E36CA4140C84280FA1D111E5AE250FDC75D6A40E4D2F755C2CADDCBC53A0E4F4D0FB1853EDDC9B4CE5B51DA5452D6171B7C08E99671A3C6157AAC11A4549424C687B66A01040F34197246F4"

    if len(data) % 2 != 0:
        data = data[:-1]
    iface = get_if()

    for i in range(810):
        s1_index = i
        s1_max_pool_index = i // 5
        bytes_data = bytes.fromhex(data)
        second_40_bits = bytes_data[i : i + 5]
        pkt = Ether(
            src=get_if_hwaddr(iface), dst="ff:ff:ff:ff:ff:ff", type=0x1234
        ) / P4calc(
            s1_index=s1_index,
            s1_max_pool_index=s1_max_pool_index,
            s1_input_data=second_40_bits,
        )
        sendp(pkt, iface=iface, verbose=False)


if __name__ == "__main__":
    main()
